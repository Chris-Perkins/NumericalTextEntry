//
//  UIFlatNumberDisplayer.swift
//  NumericalTextField
//
//  Created by Christopher Perkins on 8/3/18.
//

/// A UINumberDisplayer that simply displays all of the numbers within one flat UILabel.
open class UIFlatNumberDisplayer: UINumberDisplayer {
    /// The alpha component of faded colors.
    private static let fadedColorAlpha: CGFloat = 0.25
    
    /// The font that the label should use.
    private let font: UIFont
    
    /// The text color of the label.
    private let textColor: UIColor
    
    /// The label where the last displayed value was stored.
    private var displayedLabel: UILabel?
    
    /// Initializes this number displayer with the provided font and fontColor
    ///
    /// - Parameters:
    ///   - font: the font for the displayer
    ///   - fontColor: the color of the font for the displayer
    public init(withFont font: UIFont = UIFont.systemFont(ofSize: 24.0),
                withTextColor textColor: UIColor = UIColor.black) {
        self.font = font
        self.textColor = textColor
    }
    
    /// Displays the input value within a single UILabel that is generated by this method.
    /// Characters in both the `stringToDisplay` and the `rawValue` are bolded, and characters that
    /// are not in both are given an opacity of 0.25.
    ///
    /// - Parameters:
    ///   - stringToDisplay: The complete string to display.
    ///   - rawValue: The raw value of the string to display (not formatted)
    ///   - numberFormatter: The formatter used to generate the stringToDisplay.
    ///   - view: The view where the value should be displayed in
    /// - Returns: The views that were created to hold the displayed value.
    open func displayValue(_ stringToDisplay: String, withRawString rawString: String,
                           numberFormatter: NumberFormatter,
                           inView view: UIView) -> [UIView] {
        // If the displayLabel does not yet exist or the label changed containing views,
        // create a new label.
        if displayedLabel == nil || displayedLabel?.superview != view {
            displayedLabel = UILabel()
            displayedLabel?.textAlignment = .right
            view.addSubview(displayedLabel!)
            displayedLabel!.copy(.top, .left, .right, .bottom, of: view)
        }
        
        displayedLabel?.attributedText = NumberDisplayerUtils
            .getAttributedStringForStrings(displayedString: stringToDisplay, rawString: rawString,
                                           numberFormatter: numberFormatter,
                                           matchingTextColor: textColor,
                                           missingTextColor: textColor.withAlphaComponent(
                                            UIFlatNumberDisplayer.fadedColorAlpha), font: font)
        
        return [displayedLabel!]
    }
}
